{
  "section": "spec-examples",
  "ramlversion": "1.0",
  "tests": [
    {
      "description": "Github v3 example inside the 'The Root of the Document' section",
      "input": "root",
      "valid": true,
      "tags": [
        "general"
      ]
    },
    {
      "description": "RAML that illustrates how to use 'value' in 'example'",
      "input": "additional-facets-single-example",
      "valid": true,
      "tags": [
        "type", "example"
      ]
    },
    {
      "description": "restricting all additional properties to be string.",
      "input": "additional-properties",
      "valid": true,
      "tags": [
        "type", "additional property", "object"
      ]
    },
    {
      "description": "annotating scalar node",
      "input": "annotating-scalar-nodes",
      "valid": true,
      "tags": [
        "annotation", "scalar node"
      ]
    },
    {
      "description": "applying some restrictions on the allowed targets of annotations",
      "input": "annotations-targets",
      "valid": true,
      "tags": [
        "annotation", "allowed target"
      ]
    },
    {
      "description": "annotation type declarations and the application of the annotations",
      "input": "annotations",
      "valid": true,
      "tags": [
        "annotation"
      ]
    },
    {
      "description": "declaration and use of a 'testHarness' annotation that should be a string value",
      "input": "apply-annotations-1",
      "valid": true,
      "tags": [
        "annotation"
      ]
    },
    {
      "description": "implicit, default declaration of the value type when there is no explicit type declaration",
      "input": "apply-annotations-2",
      "valid": true,
      "tags": [
        "annotation"
      ]
    },
    {
      "description": "example on how default media types get automatically applied or in the /send resources overriden",
      "input": "apply-default-media-type",
      "valid": true,
      "tags": [
        "media type"
      ]
    },
    {
      "description": "application of resource types and traits",
      "input": "apply-resourcetypes-traits",
      "valid": true,
      "tags": [
        "trait", "resource type"
      ]
    },
    {
      "description": "how to use 'null' to indicate that a method can be called without applying any security scheme",
      "input": "apply-security-scheme-null",
      "valid": true,
      "tags": [
        "security scheme"
      ]
    },
    {
      "description": "how to apply a security scheme to a method",
      "input": "apply-security-schemes",
      "valid": true,
      "tags": [
        "security scheme"
      ]
    },
    {
      "description": "how to use a parameter inside a security scheme",
      "input": "apply-security-scheme-parameter",
      "valid": true,
      "tags": [
        "security scheme"
      ]
    },
    {
      "description": "use of an invalid scope 'GUEST' which is not defined inside the security scheme",
      "input": "apply-security-scheme-invalid-scope",
      "valid": false,
      "tags": [
        "security scheme", "scopes"
      ]
    },
    {
      "description": "how to define an array without type expression",
      "input": "array-type-expanded",
      "valid": true,
      "tags": [
        "type", "array"
      ]
    },
    {
      "description": "type using array type expression and example",
      "input": "array-type",
      "valid": true,
      "tags": [
        "type", "array", "example"
      ]
    },
    {
      "description": "uri parameter as an array",
      "input": "array-uri-parameter",
      "valid": true,
      "tags": [
        "array", "uri parameter"
      ]
    },
    {
      "description": "how to define a base URI parameter",
      "input": "base-uri-parameter",
      "valid": true,
      "tags": [
        "base uri parameter"
      ]
    },
    {
      "description": "'version' as base URI template does not need any base URI parameter",
      "input": "base-uri-template",
      "valid": true,
      "tags": [
        "base uri parameter"
      ]
    },
    {
      "description": "various combinations of both default and non-default media types, and both data type declarations and references",
      "input": "bodies",
      "valid": true,
      "tags": [
        "body", "default media type", "external schema"
      ]
    },
    {
      "description": "simple boolean type definition",
      "input": "boolean-type",
      "valid": true,
      "tags": [
        "type", "scalar", "boolean"
      ]
    },
    {
      "description": "complex example on using single or multiple example(s)",
      "input": "complex-examples",
      "valid": true,
      "tags": [
        "type", "example"
      ]
    },
    {
      "description": "headers inheriting from a trait, allowing multiple instances of a header, specifying examples, and overriding the headers when applied to a method and a resource",
      "input": "complex-headers",
      "valid": true,
      "tags": [
        "header", "trait", "example"
      ]
    },
    {
      "description": "all date types with examples",
      "input": "date-types",
      "valid": true,
      "tags": [
        "type", "scalar", "date", "example"
      ]
    },
    {
      "description": "an array of default media type",
      "input": "default-media-types-multiple",
      "valid": true,
      "tags": [
        "default media type"
      ]
    },
    {
      "description": "single default media type",
      "input": "default-media-types-single",
      "valid": true,
      "tags": [
        "default media type"
      ]
    },
    {
      "description": "apply global default security scheme",
      "input": "default-security",
      "valid": true,
      "tags": [
        "security", "default security", "security scheme"
      ]
    },
    {
      "description": "use 'any' default type in combination with default media type",
      "input": "default-type-any-2",
      "valid": true,
      "tags": [
        "type", "default type", "default media type", "body"
      ]
    },
    {
      "description": "use 'any' default type",
      "input": "default-type-any",
      "valid": true,
      "tags": [
        "type", "default type", "body"
      ]
    },
    {
      "description": "no need to define 'type: object' when 'properties' facet is being used",
      "input": "default-type-object",
      "valid": true,
      "tags": [
        "type", "default type", "object"
      ]
    },
    {
      "description": "no need to define 'type: string'",
      "input": "default-type-string",
      "valid": true,
      "tags": [
        "type", "default type", "scalar", "string"
      ]
    },
    {
      "description": "object type definition",
      "input": "default-types-1",
      "valid": true,
      "tags": [
        "type", "object"
      ]
    },
    {
      "description": "define URI parameter",
      "input": "define-uri-parameters",
      "valid": true,
      "tags": [
        "type", "uri paramater"
      ]
    },
    {
      "description": "define 'documentation' node",
      "input": "documentation",
      "valid": true,
      "tags": [
        "documentation"
      ]
    },
    {
      "description": "duplicated URIs which is invalid in RAML",
      "input": "duplicated-uris-invalid",
      "valid": false,
      "tags": [
        "uri"
      ]
    },
    {
      "description": "'Extension' fragment that adds an additional post method with description to '/books'",
      "input": "extension-post",
      "valid": true,
      "tags": [
        "extension", "fragment"
      ]
    },
    {
      "description": "invalid example on extending a JSON schema defined type",
      "input": "external-type-extend-invalid",
      "valid": false,
      "tags": [
        "schema", "type", "type expression"
      ]
    },
    {
      "description": "invalid example on adding facets to a JSON schema defined type",
      "input": "external-types-invalid",
      "valid": false,
      "tags": [
        "schema", "type", "facet"
      ]
    },
    {
      "description": "using a JSON schema defined type",
      "input": "external-types",
      "valid": true,
      "tags": [
        "schema", "type"
      ]
    },
    {
      "description": "chaining library namespaces is not allowed",
      "input": "libraries-invalid-chaining",
      "valid": false,
      "tags": [
        "library", "trait", "resource type", "type"
      ]
    },
    {
      "description": "simply including another fragment",
      "input": "fragments-simple",
      "valid": true,
      "tags": [
        "fragment", "include"
      ]
    },
    {
      "description": "include a simple YAML map from another file",
      "input": "includes",
      "valid": true,
      "tags": [
        "fragment", "include"
      ]
    },
    {
      "description": "inline type declaration",
      "input": "inline-type-declaration",
      "valid": true,
      "tags": [
        "type", "body"
      ]
    },
    {
      "description": "simple integer type with all available facets",
      "input": "integer-type",
      "valid": true,
      "tags": [
        "type", "scalar", "integer"
      ]
    },
    {
      "description": "complex type definition using various types and facets",
      "input": "introduction-types-complex",
      "valid": true,
      "tags": [
        "type"
      ]
    },
    {
      "description": "simple object type definition used in a body",
      "input": "introduction-types",
      "valid": true,
      "tags": [
        "type", "body", "object"
      ]
    },
    {
      "description": "discriminator is not allowed in any inline type declaration and for union types",
      "input": "invalid-discriminator-usage",
      "valid": false,
      "tags": [
        "type", "discriminator", "object", "union"
      ]
    },
    {
      "description": "use library inside resource type fragment",
      "input": "libraries-resourcetype",
      "valid": true,
      "tags": [
        "resource type", "fragment", "library"
      ]
    },
    {
      "description": "simple library definition",
      "input": "libraries",
      "valid": true,
      "tags": [
        "fragment", "library"
      ]
    },
    {
      "description": "simple book library example",
      "input": "librarybooks",
      "valid": true,
      "tags": [
        "general"
      ]
    },
    {
      "description": "multiple example definition",
      "input": "multiple-examples",
      "valid": true,
      "tags": [
        "type", "example"
      ]
    },
    {
      "description": "multiple inheritance on two objects",
      "input": "multiple-inheritance-1",
      "valid": true,
      "tags": [
        "type", "object", "multiple inheritance", "type expression"
      ]
    },
    {
      "description": "multiple inheritance on two 'number' types both with not conflicting facets",
      "input": "multiple-inheritance-2",
      "valid": true,
      "tags": [
        "type", "scalar", "number", "facet", "multiple inheritance", "type expression"
      ]
    },
    {
      "description": "multiple inheritance on two 'number' types both with conflicting facets",
      "input": "multiple-inheritance-3-invalid",
      "valid": false,
      "tags": [
        "type", "scalar", "number", "facet", "multiple inheritance", "type expression"
      ]
    },
    {
      "description": "nested resources",
      "input": "nested-resources",
      "valid": true,
      "tags": [
        "resource"
      ]
    },
    {
      "description": "an instance cannot have an empty / no valued node",
      "input": "null-type-invalid",
      "valid": false,
      "tags": [
        "nil", "type"
      ]
    },
    {
      "description": "using 'nil' with a string union",
      "input": "null-type-union",
      "valid": true,
      "tags": [
        "nil", "type"
      ]
    },
    {
      "description": "using 'nil' as a type",
      "input": "null-type",
      "valid": true,
      "tags": [
        "nil", "type"
      ]
    },
    {
      "description": "using 'number' as a type and apply all available facets",
      "input": "number-type",
      "valid": true,
      "tags": [
        "number", "scalar", "type"
      ]
    },
    {
      "description": "using full expression to define optional properties",
      "input": "object-type-long",
      "valid": true,
      "tags": [
        "object", "type"
      ]
    },
    {
      "description": "using syntactical sugar to define optional properties",
      "input": "object-type-short",
      "valid": true,
      "tags": [
        "object", "type"
      ]
    },
    {
      "description": "using overlays to add additional information to an existing RAML",
      "input": "overlay-monitoring",
      "valid": true,
      "tags": [
        "overlay", "fragment"
      ]
    },
    {
      "description": "using overlays to change nodes from an existing RAML",
      "input": "overlay-spanish",
      "valid": true,
      "tags": [
        "overlay", "fragment"
      ]
    },
    {
      "description": "using 'HTTP' and 'HTTPS' protocols",
      "input": "protocols",
      "valid": true,
      "tags": [
        "protocol"
      ]
    },
    {
      "description": "'get' method using HTTP query parameters",
      "input": "query-parameter",
      "valid": true,
      "tags": [
        "query parameter"
      ]
    },
    {
      "description": "union types and extended multiple types are used to constrain the query string to specific alternatives",
      "input": "query-string",
      "valid": true,
      "tags": [
        "query string", "type", "union"
      ]
    },
    {
      "description": "resource type and a file that includes this fragment file",
      "input": "resolve-includes",
      "valid": true,
      "tags": [
        "include"
      ]
    },
    {
      "description": "resource type with an optional HTTP method that defines a required header and a custom parameter called",
      "input": "resourcetypes-optionalmethods",
      "valid": true,
      "tags": [
        "resource type", "http method", "custom parameter"
      ]
    },
    {
      "description": "passing parameter values to resource types and traits",
      "input": "resourcetypes-traits-parameter",
      "valid": true,
      "tags": [
        "resource type", "traits", "custom parameter"
      ]
    },
    {
      "description": "using functions and reserved parameters inside resource types and traits",
      "input": "resourcetypes-traits-parameterfunctions",
      "valid": true,
      "tags": [
        "resource type", "traits", "custom parameter", "function"
      ]
    },
    {
      "description": "declaring resource types and traits",
      "input": "resourcetypes-traits",
      "valid": true,
      "tags": [
        "resource type", "traits"
      ]
    },
    {
      "description": "define responses",
      "input": "responses",
      "valid": true,
      "tags": [
        "responses"
      ]
    },
    {
      "description": "resource types and traits are defined in external files that are included",
      "input": "resourcetypes-traits-external",
      "valid": true,
      "tags": [
        "resource type", "trait"
      ]
    },
    {
      "description": "Basic Authentication security scheme",
      "input": "security-schemes-basic",
      "valid": true,
      "tags": [
        "security scheme", "basic authentication"
      ]
    },
    {
      "description": "Digest Authentication security scheme",
      "input": "security-schemes-digest",
      "valid": true,
      "tags": [
        "security scheme", "digest authentication"
      ]
    },
    {
      "description": "OAuth 1.0 security scheme",
      "input": "security-schemes-oauth1",
      "valid": true,
      "tags": [
        "security scheme", "oauth 1.0"
      ]
    },
    {
      "description": "OAuth 2.0 security scheme",
      "input": "security-schemes-oauth2",
      "valid": true,
      "tags": [
        "security scheme", "oauth 2.0"
      ]
    },
    {
      "description": "Pass Through security scheme",
      "input": "security-schemes-pass",
      "valid": true,
      "tags": [
        "security scheme", "pass through"
      ]
    },
    {
      "description": "Custom security scheme",
      "input": "security-schemes-xother",
      "valid": true,
      "tags": [
        "security scheme", "custom security scheme"
      ]
    },
    {
      "description": "define authentication using OAuth 2.0 and OAuth 1.0 security schemes",
      "input": "security-schemes",
      "valid": true,
      "tags": [
        "security scheme"
      ]
    },
    {
      "description": "define simple headers",
      "input": "simple-header",
      "valid": true,
      "tags": [
        "headers"
      ]
    },
    {
      "description": "define a simple example",
      "input": "single-example",
      "valid": true,
      "tags": [
        "type", "example"
      ]
    },
    {
      "description": "define a 'string' type with all allowed facets",
      "input": "string-type",
      "valid": true,
      "tags": [
        "type", "scalar", "string"
      ]
    },
    {
      "description": "usage of template URIs",
      "input": "template-uri-1",
      "valid": true,
      "tags": [
        "template uri"
      ]
    },
    {
      "description": "multiple trailing slashes shouldn't raise issues",
      "input": "trailing-slashes",
      "valid": true,
      "tags": [
        "template uri"
      ]
    },
    {
      "description": "define enum values of a query parameter in both trait and resource",
      "input": "traits-merge-enumlist",
      "valid": true,
      "tags": [
        "trait", "enum", "resource"
      ]
    },
    {
      "description": "extending using a type expression combined with unions and arrays",
      "input": "type-expression",
      "valid": true,
      "tags": [
        "type expression", "type", "union", "array"
      ]
    },
    {
      "description": "optional properties using '?'",
      "input": "type-names-question-mark",
      "valid": true,
      "tags": [
        "type", "optional properties", "object"
      ]
    },
    {
      "description": "'schemas' and 'types' as well as 'schema' and 'type' are mutual exclusive",
      "input": "type-schema-invalid",
      "valid": false,
      "tags": [
        "type", "schema"
      ]
    },
    {
      "description": "pattern properties restricting the property names of any additional properties inside a type instance",
      "input": "types-pattern-properties",
      "valid": true,
      "tags": [
        "type", "pattern property", "object"
      ]
    },
    {
      "description": "type definition with union and multiple inheritance",
      "input": "union-type-multiple-inheritance",
      "valid": true,
      "tags": [
        "type", "union", "multiple inheritance"
      ]
    },
    {
      "description": "type definition using simple union between two types",
      "input": "union-type",
      "valid": true,
      "tags": [
        "type", "union"
      ]
    },
    {
      "description": "resources and nested resources with URI parameters",
      "input": "uri-parameters-1",
      "valid": true,
      "tags": [
        "resource", "uri paramater"
      ]
    },
    {
      "description": "using predefined 'ext' for defining media types in the URL",
      "input": "uri-parameters-ext",
      "valid": true,
      "tags": [
        "resource", "uri paramater"
      ]
    },
    {
      "description": "allowed duplicated URI templates",
      "input": "uri-templates-allowed",
      "valid": true,
      "tags": [
        "resource", "uri template"
      ]
    },
    {
      "description": "define user-defined facets",
      "input": "user-defined-facets",
      "valid": true,
      "tags": [
        "type", "custom facet"
      ]
    },
    {
      "description": "define 'discriminator' in object type",
      "input": "using-discriminator",
      "valid": true,
      "tags": [
        "type", "object", "discriminator"
      ]
    },
    {
      "description": "define 'discriminatorValue' in object type",
      "input": "using-discriminatorvalue",
      "valid": true,
      "tags": [
        "type", "object", "discriminator value"
      ]
    },
    {
      "description": "using 'xml' facet",
      "input": "xml-facet",
      "valid": true,
      "tags": [
        "type", "xml facet"
      ]
    }
  ]
}