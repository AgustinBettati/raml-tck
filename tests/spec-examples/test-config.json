{
  "tests": [
    {
      "description": "various combinations of both default and non-default media types, and both data type declarations and references",
      "input": "bodies",
      "valid": true,
      "tags": [
        "body", "default media type", "external schema"
      ]
    },
    {
      "description": "complex example on using single or multiple example(s)",
      "input": "complex-examples",
      "valid": true,
      "tags": [
        "type", "example"
      ]
    },
    {
      "description": "multiple example definition",
      "input": "multiple-examples",
      "valid": true,
      "tags": [
        "type", "example"
      ]
    },
    {
      "description": "define a simple example",
      "input": "single-example",
      "valid": true,
      "tags": [
        "type", "example"
      ]
    },
    {
      "description": "headers inheriting from a trait, allowing multiple instances of a header, specifying examples, and overriding the headers when applied to a method and a resource",
      "input": "complex-headers",
      "valid": true,
      "tags": [
        "header", "trait", "example"
      ]
    },
    {
      "description": "define 'documentation' node",
      "input": "documentation",
      "valid": true,
      "tags": [
        "documentation"
      ]
    },
    {
      "description": "'Extension' fragment that adds an additional post method with description to '/books'",
      "input": "extension-post",
      "valid": true,
      "tags": [
        "extension", "fragment"
      ]
    },
    {
      "description": "simply including another fragment",
      "input": "fragments-simple",
      "valid": true,
      "tags": [
        "fragment", "include"
      ]
    },
    {
      "description": "inline type declaration",
      "input": "inline-type-declaration",
      "valid": true,
      "tags": [
        "type", "body"
      ]
    },
    {
      "description": "simple book library example",
      "input": "librarybooks",
      "valid": true,
      "tags": [
        "general"
      ]
    },
    {
      "description": "nested resources",
      "input": "nested-resources",
      "valid": true,
      "tags": [
        "resource"
      ]
    },
    {
      "description": "using overlays to add additional information to an existing RAML",
      "input": "overlay-monitoring",
      "valid": true,
      "tags": [
        "overlay", "fragment"
      ]
    },
    {
      "description": "using overlays to change nodes from an existing RAML",
      "input": "overlay-spanish",
      "valid": true,
      "tags": [
        "overlay", "fragment"
      ]
    },
    {
      "description": "using 'HTTP' and 'HTTPS' protocols",
      "input": "protocols",
      "valid": true,
      "tags": [
        "protocol"
      ]
    },
    {
      "description": "'get' method using HTTP query parameters",
      "input": "query-parameter",
      "valid": true,
      "tags": [
        "query parameter"
      ]
    },
    {
      "description": "resource type and a file that includes this fragment file",
      "input": "resolve-includes",
      "valid": true,
      "tags": [
        "include"
      ]
    },
    {
      "description": "define responses",
      "input": "responses",
      "valid": true,
      "tags": [
        "responses"
      ]
    },
    {
      "description": "Github v3 example inside the 'The Root of the Document' section",
      "input": "root",
      "valid": true,
      "tags": [
        "general"
      ]
    },
    {
      "description": "define simple headers",
      "input": "simple-header",
      "valid": true,
      "tags": [
        "headers"
      ]
    },
    {
      "description": "multiple trailing slashes shouldn't raise issues",
      "input": "trailing-slashes",
      "valid": true,
      "tags": [
        "template uri"
      ]
    },
    {
      "description": "define enum values of a query parameter in both trait and resource",
      "input": "traits-merge-enumlist",
      "valid": true,
      "tags": [
        "trait", "enum", "resource"
      ]
    },
    {
      "description": "'get' method using HTTP a number query parameter with repeat attribute",
      "input": "query-parameter-repeat",
      "valid": true,
      "tags": [
        "query parameter", "repeat"
      ]
    },
    {
      "description": "To denote that a named parameter can have multiple types, the value of a named parameter property MAY be an array of mappings",
      "input": "named-parameter-multiple-types",
      "valid": true,
      "tags": [
        "parameter", "multiple type", "named parameter"
      ]
    },
    {
      "description": "The schema definitions MAY be included inline or by using the RAML !include user-defined data type",
      "input": "schemas",
      "valid": true,
      "tags": [
        "parameter", "multiple type", "named parameter"
      ]
    },
    {
      "description": "There is no limit to the number of documentation pages that can be included in a RAML API definition",
      "input": "documentation-multiple",
      "valid": true,
      "tags": [
        "documentation"
      ]
    },
    {
      "description": "If the header name contains the placeholder token {*}, processing applications MUST allow requests to send any number of headers that conform to the format specified",
      "input": "header-custom-data",
      "valid": true,
      "tags": [
        "header"
      ]
    },
    {
      "description": "A method can override an API's protocols value for that single method by setting a different value for the fields.",
      "input": "protocols-method",
      "valid": true,
      "tags": [
        "protocol", "method"
      ]
    },
    {
      "description": "Web forms REQUIRE special encoding and custom declaration",
      "input": "web-form",
      "valid": true,
      "tags": [
        "web form"
      ]
    },
    {
      "description": "An API's methods may support custom header values in responses",
      "input": "custom-header-error-response",
      "valid": true,
      "tags": [
        "response", "error", "header", "custom header"
      ]
    },
    {
      "description": "API's may include the the placeholder token {?} in a header name to indicate that any number of headers that conform to the specified format can be sent in responses.",
      "input": "response-header-custom-data",
      "valid": true,
      "tags": [
        "response", "header", "custom header"
      ]
    }
  ]
}